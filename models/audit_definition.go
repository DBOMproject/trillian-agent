// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditDefinition AuditDefinition
// Example: {"_id":3412,"channelID":"exampleChannel","eventType":"CREATE","payload":{"example":"example"},"resourceID":"exampleRecord","timestamp":"2020-10-01T21:04:14.840Z"}
//
// swagger:model AuditDefinition
type AuditDefinition struct {

	// id
	// Required: true
	ID *int64 `json:"_id"`

	// channel ID
	// Required: true
	ChannelID *string `json:"channelID"`

	// event type
	// Required: true
	EventType *string `json:"eventType"`

	// payload
	// Required: true
	Payload interface{} `json:"payload"`

	// resource ID
	// Required: true
	ResourceID *string `json:"resourceID"`

	// timestamp
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`
}

// Validate validates this audit definition
func (m *AuditDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditDefinition) validateID(formats strfmt.Registry) error {

	if err := validate.Required("_id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AuditDefinition) validateChannelID(formats strfmt.Registry) error {

	if err := validate.Required("channelID", "body", m.ChannelID); err != nil {
		return err
	}

	return nil
}

func (m *AuditDefinition) validateEventType(formats strfmt.Registry) error {

	if err := validate.Required("eventType", "body", m.EventType); err != nil {
		return err
	}

	return nil
}

func (m *AuditDefinition) validatePayload(formats strfmt.Registry) error {

	if m.Payload == nil {
		return errors.Required("payload", "body", nil)
	}

	return nil
}

func (m *AuditDefinition) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resourceID", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

func (m *AuditDefinition) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this audit definition based on context it is used
func (m *AuditDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuditDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditDefinition) UnmarshalBinary(b []byte) error {
	var res AuditDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
