// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The HTTP REST API for the Distributed Bill of Materials Agent",
    "title": "DBoM Agent",
    "contact": {
      "name": "Ryan",
      "email": "Ryan.Mathison2@unisys.com"
    },
    "version": "1.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "paths": {
    "/channels/{channelID}/records": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Record"
        ],
        "summary": "Commit a Record",
        "operationId": "CommitRecord",
        "responses": {
          "200": {
            "description": "Record has been cretead successfully",
            "schema": {
              "$ref": "#/definitions/CreateRecordResponseDefinition"
            }
          },
          "404": {
            "description": "Channel does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "409": {
            "description": "Record already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "500": {
            "description": "Error on agent",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "502": {
            "description": "Error in repository",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Commit Type",
          "name": "commit-type",
          "in": "header",
          "required": true
        },
        {
          "type": "string",
          "description": "Channel ID",
          "name": "channelID",
          "in": "path",
          "required": true
        },
        {
          "name": "Body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/RecordDefinition"
          }
        }
      ]
    },
    "/channels/{channelID}/records/{recordID}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Record"
        ],
        "summary": "Query a Record",
        "operationId": "RetrieveRecord",
        "responses": {
          "200": {
            "description": "Record has been retrieved and is in the body",
            "schema": {
              "$ref": "#/definitions/ExampleRecordPayloadDefinition"
            }
          },
          "404": {
            "description": "Channel and/or record does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "500": {
            "description": "Error on agent",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "502": {
            "description": "Error in repository",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Record ID",
          "name": "recordID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Channel ID",
          "name": "channelID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/channels/{channelID}/records/{recordID}/audit": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Record"
        ],
        "summary": "Audit an record",
        "operationId": "AuditRecord",
        "responses": {
          "200": {
            "description": "Record Audit Trail has been retrieved and is in the body",
            "schema": {
              "$ref": "#/definitions/AuditResponseDefinition"
            }
          },
          "404": {
            "description": "Channel and/or record does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "500": {
            "description": "Error on agent",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "502": {
            "description": "Error in repository",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Record ID",
          "name": "recordID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Channel ID",
          "name": "channelID",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "AuditDefinition": {
      "type": "object",
      "title": "AuditDefinition",
      "required": [
        "_id",
        "timestamp",
        "payload",
        "resourceID",
        "eventType",
        "channelID"
      ],
      "properties": {
        "_id": {
          "type": "integer",
          "format": "int64"
        },
        "channelID": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "payload": {
          "type": "object"
        },
        "resourceID": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "_id": 3412,
        "channelID": "exampleChannel",
        "eventType": "CREATE",
        "payload": {
          "example": "example"
        },
        "resourceID": "exampleRecord",
        "timestamp": "2020-10-01T21:04:14.840Z"
      }
    },
    "AuditResponseDefinition": {
      "type": "object",
      "title": "AuditResponseDefinition",
      "required": [
        "history"
      ],
      "properties": {
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditDefinition"
          }
        }
      },
      "example": {
        "history": [
          {
            "_id": 3412,
            "channelID": "exampleChannel",
            "eventType": "CREATE",
            "payload": {
              "example": "example"
            },
            "resourceID": "exampleRecord",
            "timestamp": "2020-9-01T21:04:14.840Z"
          },
          {
            "_id": 3474,
            "channelID": "exampleChannel",
            "eventType": "UPDATE",
            "payload": {
              "example": "exampleUpdated"
            },
            "resourceID": "exampleRecord",
            "timestamp": "2020-10-02T11:54:35.345Z"
          }
        ]
      }
    },
    "CreateRecordResponseDefinition": {
      "type": "object",
      "title": "CreateRecordResponseDefinition",
      "required": [
        "success"
      ],
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "example": {
        "success": true
      }
    },
    "ErrorResponseDefinition": {
      "type": "object",
      "title": "ErrorResponseDefinition",
      "required": [
        "success",
        "status"
      ],
      "properties": {
        "error": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "example": {
        "error": "Channel query failed",
        "status": "No resource found",
        "success": false
      }
    },
    "ExampleRecordPayloadDefinition": {
      "title": "ExampleRecordPayloadDefinition",
      "example": {
        "example": "example"
      }
    },
    "RecordDefinition": {
      "type": "object",
      "title": "RecordDefinition",
      "required": [
        "recordID",
        "recordIDPayload"
      ],
      "properties": {
        "recordID": {
          "type": "string"
        },
        "recordIDPayload": {
          "type": "object"
        }
      },
      "example": {
        "recordID": "exampleRecord",
        "recordIDPayload": {
          "example": "example"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Record"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The HTTP REST API for the Distributed Bill of Materials Agent",
    "title": "DBoM Agent",
    "contact": {
      "name": "Ryan",
      "email": "Ryan.Mathison2@unisys.com"
    },
    "version": "1.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "paths": {
    "/channels/{channelID}/records": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Record"
        ],
        "summary": "Commit a Record",
        "operationId": "CommitRecord",
        "responses": {
          "200": {
            "description": "Record has been cretead successfully",
            "schema": {
              "$ref": "#/definitions/CreateRecordResponseDefinition"
            }
          },
          "404": {
            "description": "Channel does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "409": {
            "description": "Record already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "500": {
            "description": "Error on agent",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "502": {
            "description": "Error in repository",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Commit Type",
          "name": "commit-type",
          "in": "header",
          "required": true
        },
        {
          "type": "string",
          "description": "Channel ID",
          "name": "channelID",
          "in": "path",
          "required": true
        },
        {
          "name": "Body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/RecordDefinition"
          }
        }
      ]
    },
    "/channels/{channelID}/records/{recordID}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Record"
        ],
        "summary": "Query a Record",
        "operationId": "RetrieveRecord",
        "responses": {
          "200": {
            "description": "Record has been retrieved and is in the body",
            "schema": {
              "$ref": "#/definitions/ExampleRecordPayloadDefinition"
            }
          },
          "404": {
            "description": "Channel and/or record does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "500": {
            "description": "Error on agent",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "502": {
            "description": "Error in repository",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Record ID",
          "name": "recordID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Channel ID",
          "name": "channelID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/channels/{channelID}/records/{recordID}/audit": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Record"
        ],
        "summary": "Audit an record",
        "operationId": "AuditRecord",
        "responses": {
          "200": {
            "description": "Record Audit Trail has been retrieved and is in the body",
            "schema": {
              "$ref": "#/definitions/AuditResponseDefinition"
            }
          },
          "404": {
            "description": "Channel and/or record does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "500": {
            "description": "Error on agent",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          },
          "502": {
            "description": "Error in repository",
            "schema": {
              "$ref": "#/definitions/ErrorResponseDefinition"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Record ID",
          "name": "recordID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Channel ID",
          "name": "channelID",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "AuditDefinition": {
      "type": "object",
      "title": "AuditDefinition",
      "required": [
        "_id",
        "timestamp",
        "payload",
        "resourceID",
        "eventType",
        "channelID"
      ],
      "properties": {
        "_id": {
          "type": "integer",
          "format": "int64"
        },
        "channelID": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "payload": {
          "type": "object"
        },
        "resourceID": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "_id": 3412,
        "channelID": "exampleChannel",
        "eventType": "CREATE",
        "payload": {
          "example": "example"
        },
        "resourceID": "exampleRecord",
        "timestamp": "2020-10-01T21:04:14.840Z"
      }
    },
    "AuditResponseDefinition": {
      "type": "object",
      "title": "AuditResponseDefinition",
      "required": [
        "history"
      ],
      "properties": {
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditDefinition"
          }
        }
      },
      "example": {
        "history": [
          {
            "_id": 3412,
            "channelID": "exampleChannel",
            "eventType": "CREATE",
            "payload": {
              "example": "example"
            },
            "resourceID": "exampleRecord",
            "timestamp": "2020-9-01T21:04:14.840Z"
          },
          {
            "_id": 3474,
            "channelID": "exampleChannel",
            "eventType": "UPDATE",
            "payload": {
              "example": "exampleUpdated"
            },
            "resourceID": "exampleRecord",
            "timestamp": "2020-10-02T11:54:35.345Z"
          }
        ]
      }
    },
    "CreateRecordResponseDefinition": {
      "type": "object",
      "title": "CreateRecordResponseDefinition",
      "required": [
        "success"
      ],
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "example": {
        "success": true
      }
    },
    "ErrorResponseDefinition": {
      "type": "object",
      "title": "ErrorResponseDefinition",
      "required": [
        "success",
        "status"
      ],
      "properties": {
        "error": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "example": {
        "error": "Channel query failed",
        "status": "No resource found",
        "success": false
      }
    },
    "ExampleRecordPayloadDefinition": {
      "title": "ExampleRecordPayloadDefinition",
      "example": {
        "example": "example"
      }
    },
    "RecordDefinition": {
      "type": "object",
      "title": "RecordDefinition",
      "required": [
        "recordID",
        "recordIDPayload"
      ],
      "properties": {
        "recordID": {
          "type": "string"
        },
        "recordIDPayload": {
          "type": "object"
        }
      },
      "example": {
        "recordID": "exampleRecord",
        "recordIDPayload": {
          "example": "example"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Record"
    }
  ]
}`))
}
