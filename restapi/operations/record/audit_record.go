// Code generated by go-swagger; DO NOT EDIT.

package record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AuditRecordHandlerFunc turns a function with the right signature into a audit record handler
type AuditRecordHandlerFunc func(AuditRecordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AuditRecordHandlerFunc) Handle(params AuditRecordParams) middleware.Responder {
	return fn(params)
}

// AuditRecordHandler interface for that can handle valid audit record params
type AuditRecordHandler interface {
	Handle(AuditRecordParams) middleware.Responder
}

// NewAuditRecord creates a new http.Handler for the audit record operation
func NewAuditRecord(ctx *middleware.Context, handler AuditRecordHandler) *AuditRecord {
	return &AuditRecord{Context: ctx, Handler: handler}
}

/* AuditRecord swagger:route GET /channels/{channelID}/records/{recordID}/audit Record auditRecord

Audit an record

*/
type AuditRecord struct {
	Context *middleware.Context
	Handler AuditRecordHandler
}

func (o *AuditRecord) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAuditRecordParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
