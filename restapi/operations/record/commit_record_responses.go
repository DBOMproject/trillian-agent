// Code generated by go-swagger; DO NOT EDIT.

package record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"trillian-agent/models"
)

// CommitRecordOKCode is the HTTP code returned for type CommitRecordOK
const CommitRecordOKCode int = 200

/*CommitRecordOK Record has been cretead successfully

swagger:response commitRecordOK
*/
type CommitRecordOK struct {

	/*
	  In: Body
	*/
	Payload *models.CreateRecordResponseDefinition `json:"body,omitempty"`
}

// NewCommitRecordOK creates CommitRecordOK with default headers values
func NewCommitRecordOK() *CommitRecordOK {

	return &CommitRecordOK{}
}

// WithPayload adds the payload to the commit record o k response
func (o *CommitRecordOK) WithPayload(payload *models.CreateRecordResponseDefinition) *CommitRecordOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit record o k response
func (o *CommitRecordOK) SetPayload(payload *models.CreateRecordResponseDefinition) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitRecordOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CommitRecordNotFoundCode is the HTTP code returned for type CommitRecordNotFound
const CommitRecordNotFoundCode int = 404

/*CommitRecordNotFound Channel does not exist

swagger:response commitRecordNotFound
*/
type CommitRecordNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponseDefinition `json:"body,omitempty"`
}

// NewCommitRecordNotFound creates CommitRecordNotFound with default headers values
func NewCommitRecordNotFound() *CommitRecordNotFound {

	return &CommitRecordNotFound{}
}

// WithPayload adds the payload to the commit record not found response
func (o *CommitRecordNotFound) WithPayload(payload *models.ErrorResponseDefinition) *CommitRecordNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit record not found response
func (o *CommitRecordNotFound) SetPayload(payload *models.ErrorResponseDefinition) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitRecordNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CommitRecordConflictCode is the HTTP code returned for type CommitRecordConflict
const CommitRecordConflictCode int = 409

/*CommitRecordConflict Record already exists

swagger:response commitRecordConflict
*/
type CommitRecordConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponseDefinition `json:"body,omitempty"`
}

// NewCommitRecordConflict creates CommitRecordConflict with default headers values
func NewCommitRecordConflict() *CommitRecordConflict {

	return &CommitRecordConflict{}
}

// WithPayload adds the payload to the commit record conflict response
func (o *CommitRecordConflict) WithPayload(payload *models.ErrorResponseDefinition) *CommitRecordConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit record conflict response
func (o *CommitRecordConflict) SetPayload(payload *models.ErrorResponseDefinition) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitRecordConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CommitRecordInternalServerErrorCode is the HTTP code returned for type CommitRecordInternalServerError
const CommitRecordInternalServerErrorCode int = 500

/*CommitRecordInternalServerError Error on agent

swagger:response commitRecordInternalServerError
*/
type CommitRecordInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponseDefinition `json:"body,omitempty"`
}

// NewCommitRecordInternalServerError creates CommitRecordInternalServerError with default headers values
func NewCommitRecordInternalServerError() *CommitRecordInternalServerError {

	return &CommitRecordInternalServerError{}
}

// WithPayload adds the payload to the commit record internal server error response
func (o *CommitRecordInternalServerError) WithPayload(payload *models.ErrorResponseDefinition) *CommitRecordInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit record internal server error response
func (o *CommitRecordInternalServerError) SetPayload(payload *models.ErrorResponseDefinition) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitRecordInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CommitRecordBadGatewayCode is the HTTP code returned for type CommitRecordBadGateway
const CommitRecordBadGatewayCode int = 502

/*CommitRecordBadGateway Error in repository

swagger:response commitRecordBadGateway
*/
type CommitRecordBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponseDefinition `json:"body,omitempty"`
}

// NewCommitRecordBadGateway creates CommitRecordBadGateway with default headers values
func NewCommitRecordBadGateway() *CommitRecordBadGateway {

	return &CommitRecordBadGateway{}
}

// WithPayload adds the payload to the commit record bad gateway response
func (o *CommitRecordBadGateway) WithPayload(payload *models.ErrorResponseDefinition) *CommitRecordBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit record bad gateway response
func (o *CommitRecordBadGateway) SetPayload(payload *models.ErrorResponseDefinition) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitRecordBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
