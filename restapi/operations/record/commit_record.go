// Code generated by go-swagger; DO NOT EDIT.

package record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CommitRecordHandlerFunc turns a function with the right signature into a commit record handler
type CommitRecordHandlerFunc func(CommitRecordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CommitRecordHandlerFunc) Handle(params CommitRecordParams) middleware.Responder {
	return fn(params)
}

// CommitRecordHandler interface for that can handle valid commit record params
type CommitRecordHandler interface {
	Handle(CommitRecordParams) middleware.Responder
}

// NewCommitRecord creates a new http.Handler for the commit record operation
func NewCommitRecord(ctx *middleware.Context, handler CommitRecordHandler) *CommitRecord {
	return &CommitRecord{Context: ctx, Handler: handler}
}

/* CommitRecord swagger:route POST /channels/{channelID}/records Record commitRecord

Commit a Record

*/
type CommitRecord struct {
	Context *middleware.Context
	Handler CommitRecordHandler
}

func (o *CommitRecord) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCommitRecordParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
