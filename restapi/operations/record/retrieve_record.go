// Code generated by go-swagger; DO NOT EDIT.

package record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveRecordHandlerFunc turns a function with the right signature into a retrieve record handler
type RetrieveRecordHandlerFunc func(RetrieveRecordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveRecordHandlerFunc) Handle(params RetrieveRecordParams) middleware.Responder {
	return fn(params)
}

// RetrieveRecordHandler interface for that can handle valid retrieve record params
type RetrieveRecordHandler interface {
	Handle(RetrieveRecordParams) middleware.Responder
}

// NewRetrieveRecord creates a new http.Handler for the retrieve record operation
func NewRetrieveRecord(ctx *middleware.Context, handler RetrieveRecordHandler) *RetrieveRecord {
	return &RetrieveRecord{Context: ctx, Handler: handler}
}

/* RetrieveRecord swagger:route GET /channels/{channelID}/records/{recordID} Record retrieveRecord

Query a Record

*/
type RetrieveRecord struct {
	Context *middleware.Context
	Handler RetrieveRecordHandler
}

func (o *RetrieveRecord) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveRecordParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
